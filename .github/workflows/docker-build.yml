name: AutoBuild Press Image

on:
  schedule:
    - cron: "0 2 * * 0" # every Sunday at 02:00 UTC
  workflow_dispatch:
    inputs:
      no_cache:
        description: "Force full rebuild (no cache). Default: true for manual runs"
        required: false
        default: "true"
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      DOCKER_HUB_USERNAME_SET: ${{ secrets.DOCKER_HUB_USERNAME != '' }}
      DOCKER_HUB_ACCESS_TOKEN_SET: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN != '' }}
      GHCR_PAT_IS_SET: ${{ secrets.GHCR_PAT != '' }}
      NO_CACHE: "false"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set NO_CACHE for manual dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          INPUT_NO_CACHE="${{ github.event.inputs.no_cache }}"
          if [ -z "$INPUT_NO_CACHE" ]; then
            echo "NO_CACHE=true" >> $GITHUB_ENV
          else
            case "${INPUT_NO_CACHE,,}" in
              "1"|"true"|"yes") echo "NO_CACHE=true" >> $GITHUB_ENV ;;
              *) echo "NO_CACHE=false" >> $GITHUB_ENV ;;
            esac
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: env.DOCKER_HUB_USERNAME_SET == 'true' && env.DOCKER_HUB_ACCESS_TOKEN_SET == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: env.GHCR_PAT_IS_SET == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Encode Apps Json
        id: encode_apps_json
        run: |
          export APPS_JSON_BASE64=$(base64 -w 0 apps.json)
          echo "APPS_JSON_BASE64=$APPS_JSON_BASE64" >> $GITHUB_ENV

      - name: Compute Incremental Version
        id: version
        run: |
          VERSION_FILE=".build_version"
          if [ ! -f "$VERSION_FILE" ]; then
            echo "0.0.0" > "$VERSION_FILE"
          fi

          CURRENT_VERSION=$(cat "$VERSION_FILE")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Increment minor by 1 and reset patch
          MINOR=$((MINOR + 1))
          PATCH=0

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "$NEW_VERSION" > "$VERSION_FILE"

          echo "IMAGE_TAG_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

          # Commit updated version to repo (optional)
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add "$VERSION_FILE"
          git commit -m "chore: bump version to $NEW_VERSION" || true
          git push || true

      - name: Prepare Docker Tags
        id: prep_tags
        run: |
          TAG=${{ env.IMAGE_TAG_VERSION }}
          MAJOR=v$(echo $TAG | cut -d. -f1)
          IMAGE_DH=geniusdynamics/press
          IMAGE_GH=ghcr.io/${{ github.repository_owner }}/press

          TAGS=""
          if [ "${{ env.DOCKER_HUB_USERNAME_SET }}" = "true" ] && [ "${{ env.DOCKER_HUB_ACCESS_TOKEN_SET }}" = "true" ]; then
            TAGS="$TAGS,$IMAGE_DH:$TAG"
            TAGS="$TAGS,$IMAGE_DH:$MAJOR"
          fi

          if [ "${{ env.GHCR_PAT_IS_SET }}" = "true" ]; then
            TAGS="$TAGS,$IMAGE_GH:$TAG"
            TAGS="$TAGS,$IMAGE_GH:$MAJOR"
          fi

          TAGS=$(echo $TAGS | sed 's/^,//')
          echo "FINAL_TAGS=${TAGS}" >> $GITHUB_ENV

      - name: Build and Push Image
        if: env.FINAL_TAGS != ''
        uses: docker/build-push-action@v6
        with:
          context: .
          file: images/custom/Containerfile
          push: true
          tags: ${{ env.FINAL_TAGS }}
          build-args: |
            APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}
          platforms: linux/amd64
          no-cache: ${{ env.NO_CACHE }}

      - name: Build Summary
        run: |
          echo "✔️ Build completed for press ${{ env.IMAGE_TAG_VERSION }}"
          echo "Tags: ${{ env.FINAL_TAGS }}"
