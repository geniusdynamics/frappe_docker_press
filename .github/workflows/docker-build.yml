name: AutoBuild ERPNext Image

on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      no_cache:
        description: "Force full rebuild (no cache). Default: true for manual runs"
        required: false
        default: "true"
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      DOCKER_HUB_USERNAME_SET: ${{ secrets.DOCKER_HUB_USERNAME != '' }}
      DOCKER_HUB_ACCESS_TOKEN_SET: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN != '' }}
      GHCR_PAT_IS_SET: ${{ secrets.GHCR_PAT != '' }}
      NO_CACHE: "false" # default; overwritten for manual runs below

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set NO_CACHE for manual dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          INPUT_NO_CACHE="${{ github.event.inputs.no_cache }}"
          if [ -z "$INPUT_NO_CACHE" ]; then
            echo "NO_CACHE=true" >> $GITHUB_ENV
            echo "Manual dispatch: using NO_CACHE=true (default)"
          else
            case "${INPUT_NO_CACHE,,}" in
              "1"|"true"|"yes")
                echo "NO_CACHE=true" >> $GITHUB_ENV
                echo "Manual dispatch: using NO_CACHE=true (from input)"
                ;;
              *)
                echo "NO_CACHE=false" >> $GITHUB_ENV
                echo "Manual dispatch: using NO_CACHE=false (from input)"
                ;;
            esac
          fi

      # - name: Free up disk space on runner
      #   run: |
      #     echo "Initial disk usage:"
      #     df -h
      #     sudo rm -rf /usr/share/dotnet \
      #                 /opt/ghc \
      #                 /usr/local/share/boost \
      #                 /usr/local/lib/android \
      #                 /opt/hostedtoolcache \
      #                 /usr/share/swift \
      #                 /usr/local/share/powershell
      #     docker system prune -af --volumes || true
      #     echo "After cleanup:"
      #     df -h

      - name: Fetch Latest ERPNext Release Tag and Date
        id: get_erpnext_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          API_URL="https://api.github.com/repos/frappe/erpnext/releases"
          HEADERS=(-H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GH_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28")

          RELEASES=$(curl -sL "${HEADERS[@]}" "$API_URL")

          if [ "$(echo "$RELEASES" | jq length)" -eq 0 ]; then
            echo "Error: No releases found."
            exit 1
          fi

          # Fetch the latest release (this can be adjusted if you need a specific strategy for choosing a release)
          LATEST_RELEASE=$(echo "$RELEASES" | jq '.[0]')
          LATEST_RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          RELEASE_DATE=$(echo "$LATEST_RELEASE" | jq -r '.created_at')

          if [ -z "$LATEST_RELEASE_TAG" ]; then
            echo "Error: Failed to get the latest release tag."
            exit 1
          fi

          echo "Fetched LATEST version: $LATEST_RELEASE_TAG"
          echo "Release created at: $RELEASE_DATE"

          # Ensure we only proceed if the release is v15
          if [[ ! "$LATEST_RELEASE_TAG" =~ ^v15 ]]; then
            echo "Skipping build: Only v15 releases are allowed."
            exit 0
          fi



          ERPNext_VERSION_TAG="$LATEST_RELEASE_TAG"
          FRAPPE_BRANCH_FOR_BUILD="version-$(echo "$LATEST_RELEASE_TAG" | cut -d. -f1 | sed 's/v//')"
          IMAGE_TAG_VERSION="$(echo "$LATEST_RELEASE_TAG" | sed 's/v//')"

          if [ -z "$IMAGE_TAG_VERSION" ]; then
            echo "Error: IMAGE_TAG_VERSION is empty or null after processing LATEST tag."
            exit 1
          fi

          echo "ERPNext_VERSION_TAG=$ERPNext_VERSION_TAG" >> $GITHUB_ENV
          echo "FRAPPE_BRANCH_FOR_BUILD=$FRAPPE_BRANCH_FOR_BUILD" >> $GITHUB_ENV
          echo "IMAGE_TAG_VERSION=$IMAGE_TAG_VERSION" >> $GITHUB_ENV

          echo "Successfully set version tags:"
          echo "ERPNext_VERSION_TAG: $ERPNext_VERSION_TAG"
          echo "FRAPPE_BRANCH_FOR_BUILD: $FRAPPE_BRANCH_FOR_BUILD"
          echo "IMAGE_TAG_VERSION: $IMAGE_TAG_VERSION"

      # - name: Free up disk space on runner (again, after fetching release)
      #   if: runner.os != 'Windows'
      #   run: |
      #     echo "Initial disk space:"
      #     df -h
      #     echo "Attempting to remove large pre-installed toolsets..."
      #     sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost /usr/local/lib/android /opt/hostedtoolcache/CodeQL || true
      #     echo "Attempting to prune Docker system..."
      #     sudo docker system prune -af --volumes || true
      #     echo "Attempting to clean apt cache..."
      #     sudo apt-get clean || true
      #     sudo rm -rf /var/lib/apt/lists/* || true
      #     echo "Disk space after cleanup attempts:"
      #     df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: env.DOCKER_HUB_USERNAME_SET == 'true' && env.DOCKER_HUB_ACCESS_TOKEN_SET == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: env.GHCR_PAT_IS_SET == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Encode Apps Json
        id: encode_apps_json
        run: |
          export APPS_JSON_BASE64=$(base64 -w 0 apps.json)
          echo "APPS_JSON_BASE64=$APPS_JSON_BASE64" >> $GITHUB_ENV

      - name: Prepare Docker Tags
        id: prep_tags
        run: |
          TAG=${{ env.IMAGE_TAG_VERSION }}
          MAJOR=v$(echo $TAG | cut -d. -f1)
          IMAGE_DH=geniusdynamics/erpnext
          IMAGE_GH=ghcr.io/${{ github.repository_owner }}/erp-next

          # Initialize TAGS
          TAGS=""

          # Conditionally add Docker Hub tags
          if [ "${{ env.DOCKER_HUB_USERNAME_SET }}" = "true" ] && [ "${{ env.DOCKER_HUB_ACCESS_TOKEN_SET }}" = "true" ]; then
            TAGS="$TAGS,$IMAGE_DH:$TAG"
            TAGS="$TAGS,$IMAGE_DH:$MAJOR"
          fi

          # Conditionally add GHCR tags
          if [ "${{ env.GHCR_PAT_IS_SET }}" = "true" ]; then
            TAGS="$TAGS,$IMAGE_GH:$TAG"
            TAGS="$TAGS,$IMAGE_GH:$MAJOR"
          fi

          # Remove leading comma if present
          if [ -n "$TAGS" ]; then
            TAGS=$(echo $TAGS | sed 's/^,//')
          fi

          echo "FINAL_TAGS=${TAGS}" >> $GITHUB_ENV
          echo "BUILD_ARGS=--build-arg ERPNEXT_VERSION=${{ env.ERPNext_VERSION_TAG }} --build-arg FRAPPE_BRANCH=${{ env.FRAPPE_BRANCH_FOR_BUILD }}" >> $GITHUB_ENV

      - name: Compute and Log Cache Refs
        run: |
          # Compute the cache refs we will use and print them for debugging.
          DH_USER="${{ secrets.DOCKER_HUB_USERNAME }}"
          GH_OWNER="${{ github.repository_owner }}"
          VERSION="${{ env.IMAGE_TAG_VERSION }}"

          CACHE_DH_VERSIONED="${DH_USER}/erpnext:cache-${VERSION}"
          CACHE_DH_GENERIC="${DH_USER}/erpnext:cache"
          CACHE_GH_VERSIONED="ghcr.io/${GH_OWNER}/erp-next:cache-${VERSION}"
          CACHE_GH_GENERIC="ghcr.io/${GH_OWNER}/erp-next:cache"

          echo "CACHE_DH_VERSIONED=${CACHE_DH_VERSIONED}"
          echo "CACHE_DH_GENERIC=${CACHE_DH_GENERIC}"
          echo "CACHE_GH_VERSIONED=${CACHE_GH_VERSIONED}"
          echo "CACHE_GH_GENERIC=${CACHE_GH_GENERIC}"

          # Expose them as environment vars for the following build step
          echo "CACHE_FROM_REF1=type=registry,ref=${CACHE_DH_VERSIONED}" >> $GITHUB_ENV
          echo "CACHE_FROM_REF2=type=registry,ref=${CACHE_DH_GENERIC}" >> $GITHUB_ENV
          echo "CACHE_FROM_REF3=type=registry,ref=${CACHE_GH_VERSIONED}" >> $GITHUB_ENV
          echo "CACHE_FROM_REF4=type=registry,ref=${CACHE_GH_GENERIC}" >> $GITHUB_ENV
          echo "CACHE_TO_REF1=type=registry,ref=${CACHE_DH_VERSIONED},mode=max" >> $GITHUB_ENV
          echo "CACHE_TO_REF2=type=registry,ref=${CACHE_GH_VERSIONED},mode=max" >> $GITHUB_ENV

      - name: Build and Push Image
        if: env.FINAL_TAGS != ''
        uses: docker/build-push-action@v6
        with:
          context: .
          file: images/custom/Containerfile
          push: true
          tags: ${{ env.FINAL_TAGS }}
          build-args: |
            ${{ env.BUILD_ARGS }}
            APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}
          platforms: linux/amd64
          cache-from: |
            ${{ env.CACHE_FROM_REF1 }}
            ${{ env.CACHE_FROM_REF2 }}
            ${{ env.CACHE_FROM_REF3 }}
            ${{ env.CACHE_FROM_REF4 }}
          cache-to: |
            ${{ env.CACHE_TO_REF1 }}
            ${{ env.CACHE_TO_REF2 }}
          no-cache: ${{ env.NO_CACHE }}

      - name: Build Summary
        run: |
          echo "✔️ Build completed for ERPNext ${{ env.ERPNext_VERSION_TAG }}"
          echo "Tags: ${{ env.FINAL_TAGS }}"
